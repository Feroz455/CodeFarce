/*
E. Mirror Grid
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
You are given a square grid with n rows and n columns. Each cell contains either 0 or 1.

In an operation, you can select a cell of the grid and flip it (from 0→1 or 1→0). Find the minimum number of operations you need to obtain a square that remains the same when rotated 0∘, 90∘, 180∘ and 270∘.

The picture below shows an example of all rotations of a grid.


Input
The first line contains a single integer t (1≤t≤100) — the number of test cases.

The first line of each test case contains a single integer n (1≤n≤100) — the size of the grid.

Then n lines follow, each with n characters ai,j (0≤ai,j≤1) — the number written in each cell.

Output
For each test case output a single integer  — the minimum number of operations needed to make the square look the same rotated 0∘, 90∘, 180∘ and 270∘.

Example
inputCopy
5
3
010
110
010
1
0
5
11100
11011
01011
10011
11000
5
01000
10101
01010
00010
01001
5
11001
00000
11111
10110
01111
outputCopy
1
0
9
7
6
Note
In the first test case, we can perform one operations to make the grid 010111010. Now, all rotations of the square are the same.

In the second test case, all rotations of the square are already the same, so we don't need any flips
*/
#include <bits/stdc++.h>
using namespace std;

void solve()
{
  int n;
  cin >> n;
  int a[n][n];
  for (int i = 0; i < n; i++)
  {
    for (int j = 0; j < n; j++)
    {
      char c;
      cin >> c;
      a[i][j] = c - '0';
    }
  }
  int ans = 0;
  for (int i = 0; i < (n + 1) / 2; i++)
  {
    for (int j = 0; j < n / 2; j++)
    {
      int nowi = i, nowj = j;
      int oldnowj = nowj;
      int sum = a[nowi][nowj];
      nowj = n - nowi - 1;
      nowi = oldnowj;
      sum += a[nowi][nowj];
      oldnowj = nowj;
      nowj = n - nowi - 1;
      nowi = oldnowj;
      sum += a[nowi][nowj];
      oldnowj = nowj;
      nowj = n - nowi - 1;
      nowi = oldnowj;
      sum += a[nowi][nowj];
      ans += min(sum, 4 - sum);
    }
  }
  cout << ans << endl;
}

int main()
{
  int t;
  cin >> t;
  while (t--)
  {
    solve();
  }
  return 0;
}
/*
→Judgement Protocol
Test: #1, time: 0 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK
Input
5
3
010
110
010
1
0
5
11100
11011
01011
10011
11000
5
01000
10101
01010
00010
01001
5
11001
00000
11111
10110
01111
Output
1
0
9
7
6
Answer
1
0
9
7
6
Checker Log
ok 5 number(s): "1 0 9 7 6"
Test: #2, time: 0 ms., memory: 0 KB, exit code: 0, checker exit code: 0, verdict: OK
Input
100
3
010
011
010
3
000
101
111
4
0010
0100
0101
0111
1
1
2
01
00
5
10000
01100
01110
01010
10110
2
01
10
4
0111
1001
0101
0110
3
001
100
000
2
01
01
4
0011
1101
1010
1010
5
11100
11011
01011
10011
11000
3
011
001
011
1
0
3
001
011
000
2
11
00
2
01
10
1
0
3
001
100
111
5
01011
01011
11110
00111
00010
5
10000
01010
11001
01100
00100
2
11
11
4
0001
1110
0001
0010
4
1110
1001
0001
0101
2
01
00
1
0
5
11001
...
Output
1
3
5
0
1
6
2
3
2
2
7
9
3
0
2
2
2
0
3
7
5
0
6
4
1
0
6
0
6
0
0
2
1
9
3
7
3
3
2
3
3
6
5
0
0
6
4
2
5
2
0
7
1
0
7
0
6
7
5
6
0
0
5
1
2
4
8
3
6
4
2
1
2
2
3
8
4
0
0
4
2
1
2
9
2
2
3
1
1
1
6
2
1
1
1
7
0
5
5
0
Answer
1
3
5
0
1
6
2
3
2
2
7
9
3
0
2
2
2
0
3
7
5
0
6
4
1
0
6
0
6
0
0
2
1
9
3
7
3
3
2
3
3
6
5
0
0
6
4
2
5
2
0
7
1
0
7
0
6
7
5
6
0
0
5
1
2
4
8
3
6
4
2
1
2
2
3
8
4
0
0
4
2
1
2
9
2
2
3
1
1
1
6
2
1
1
1
7
0
5
5
0
Checker Log
ok 100 numbers
Test: #3, time: 61 ms., memory: 32 KB, exit code: 0, checker exit code: 0, verdict: OK
Input
100
23
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11111111111111111111111
11...
Output
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
Answer
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
Checker Log
ok 100 numbers
Test: #4, time: 62 ms., memory: 40 KB, exit code: 0, checker exit code: 0, verdict: OK
Input
100
87
111110011101111110011111101001111100111111110111111110011111101101111011110110110111101
111111111111111001001111111111111011110110101101110010100110101011110011100001101111110
110111111110101100110011011111111111001000011111101111101001110011101101000101110101111
111110110010100111111100011111111110011111011110000111101111111111101101111110001111011
010110110101111111011111111110100100110111111111111111101111111111110111101110101111111
111110111110111110001101011111111111111100101001111111110...
Output
1734
919
15
1577
57
926
964
72
731
440
13
1170
1785
209
595
1852
375
155
2
1039
749
543
166
1994
1653
1887
43
393
599
1907
1964
842
614
504
345
1567
1879
920
2168
756
0
1002
1426
16
1255
13
1891
378
2112
762
11
1328
177
523
796
1091
6
4
107
52
139
461
1834
2204
1167
1344
1974
1353
1149
1287
7
1370
29
1024
1809
181
2064
1252
1976
683
474
318
1430
1440
162
16
17
1476
1506
50
694
1718
0
27
1780
1371
83
61
1399
1...
Answer
1734
919
15
1577
57
926
964
72
731
440
13
1170
1785
209
595
1852
375
155
2
1039
749
543
166
1994
1653
1887
43
393
599
1907
1964
842
614
504
345
1567
1879
920
2168
756
0
1002
1426
16
1255
13
1891
378
2112
762
11
1328
177
523
796
1091
6
4
107
52
139
461
1834
2204
1167
1344
1974
1353
1149
1287
7
1370
29
1024
1809
181
2064
1252
1976
683
474
318
1430
1440
162
16
17
1476
1506
50
694
1718
0
27
1780
1371
83
61
1399
1...
Checker Log
ok 100 numbers
Test: #5, time: 62 ms., memory: 32 KB, exit code: 0, checker exit code: 0, verdict: OK
Input
100
11
10001011111
10100001101
11000100000
10110100001
01011010011
01101100000
00100110001
00010001111
01100010110
11101111010
01101100010
17
01010011001111101
10010011111001010
10111110101001000
00000010111111000
11101100100001011
11101010010100010
10111000000111101
00001010110010000
01000001000100010
11010101111011001
01010011001010000
01010000101010101
11000111101001110
10001010000101001
11101101100011111
00111010001001111
00110010010101000
5
00111
01100
01101
00011
1...
Output
38
91
8
2371
1459
1491
316
1805
569
1660
11
34
2375
540
1
804
426
1404
79
2511
1076
113
192
884
340
46
1975
249
6
1322
2186
255
765
144
2816
1385
1935
116
2154
2108
6
1029
874
2104
1147
1895
3005
2800
1642
1113
2366
928
2016
115
215
2369
1355
29
730
468
1060
220
1478
2095
787
1665
2214
78
150
2107
2147
778
977
377
894
1015
562
462
1280
750
2055
16
386
2155
244
191
839
1479
340
1013
2493
613
210
1322
645
923
3098...
Answer
38
91
8
2371
1459
1491
316
1805
569
1660
11
34
2375
540
1
804
426
1404
79
2511
1076
113
192
884
340
46
1975
249
6
1322
2186
255
765
144
2816
1385
1935
116
2154
2108
6
1029
874
2104
1147
1895
3005
2800
1642
1113
2366
928
2016
115
215
2369
1355
29
730
468
1060
220
1478
2095
787
1665
2214
78
150
2107
2147
778
977
377
894
1015
562
462
1280
750
2055
16
386
2155
244
191
839
1479
340
1013
2493
613
210
1322
645
923
3098...
Checker Log
ok 100 numbers
Test: #6, time: 77 ms., memory: 36 KB, exit code: 0, checker exit code: 0, verdict: OK
Input
100
73
0001001001001100000010000100000100010010000000000000010110100100000000000
0001000011000001000101100010110001010110110000001001000000000000100000011
0000010011000000000001001000000010000010000101000000010000010010100000010
0000010001001010001100100000101000001000000010011010000001110001100000111
0001001000010101100100000110010001000000000001010000101000000111000000100
0000010010001100100110000010000100101010010000101010000000010101010000110
0000000100000001010010000000010001001000010110001100...
Output
1218
649
1767
786
72
7
1505
314
438
742
2036
1141
978
700
460
2048
543
1600
121
119
1419
223
713
125
1570
890
872
1115
490
770
332
693
530
874
189
1637
1588
1292
2272
1747
1716
2209
76
272
790
371
1485
1207
156
927
25
504
2145
761
178
142
1460
1240
1369
2280
197
24
641
1344
17
325
2115
1230
11
260
1964
932
463
1353
1761
808
380
953
1791
294
550
1909
1691
246
667
897
742
763
939
3
857
693
658
338
774
2
746
40
2...
Answer
1218
649
1767
786
72
7
1505
314
438
742
2036
1141
978
700
460
2048
543
1600
121
119
1419
223
713
125
1570
890
872
1115
490
770
332
693
530
874
189
1637
1588
1292
2272
1747
1716
2209
76
272
790
371
1485
1207
156
927
25
504
2145
761
178
142
1460
1240
1369
2280
197
24
641
1344
17
325
2115
1230
11
260
1964
932
463
1353
1761
808
380
953
1791
294
550
1909
1691
246
667
897
742
763
939
3
857
693
658
338
774
2
746
40
2...
Checker Log
ok 100 numbers
Test: #7, time: 62 ms., memory: 36 KB, exit code: 0, checker exit code: 0, verdict: OK
Input
100
65
00000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000...
Output
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
Answer
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
Checker Log
ok 100 numbers
Test: #8, time: 187 ms., memory: 36 KB, exit code: 0, checker exit code: 0, verdict: OK
Input
100
100
1011010111001110010111011001111111101101110101010111001110101111111011001010101001111101101000111101
0100100111110011011101111010000111000110000110111101000100101001101100011011101101001000100011000010
1000111101011101100010010101011000011010110101001011000000100110111011110101001110001011001101001101
1000010011010011011100010010000010001011001110100000101011001011100000010111100110010100000111110100
000110001010010101101101111101101010010110010100001101110100101100110010111110000100011111000...
Output
3176
3157
3129
3146
3114
3143
3088
3159
3164
3107
3147
3134
3101
3079
3114
3184
3163
3089
3124
3066
3136
3109
3099
3053
3138
3137
3182
3126
3148
3085
3126
3035
3152
3121
3165
3151
3095
3158
3112
3210
3124
3089
3114
3078
3090
3123
3133
3091
3076
3171
3133
3136
3080
3095
3182
3185
3132
3128
3173
3112
3092
3154
3135
3081
3045
3150
3149
3081
3176
3122
3079
3131
3162
3141
3103
3136
3142
3145
3194
3102
3135
3120
3154
3132
3134
3...
Answer
3176
3157
3129
3146
3114
3143
3088
3159
3164
3107
3147
3134
3101
3079
3114
3184
3163
3089
3124
3066
3136
3109
3099
3053
3138
3137
3182
3126
3148
3085
3126
3035
3152
3121
3165
3151
3095
3158
3112
3210
3124
3089
3114
3078
3090
3123
3133
3091
3076
3171
3133
3136
3080
3095
3182
3185
3132
3128
3173
3112
3092
3154
3135
3081
3045
3150
3149
3081
3176
3122
3079
3131
3162
3141
3103
3136
3142
3145
3194
3102
3135
3120
3154
3132
3134
3...
Checker Log
ok 100 numbers
*/
